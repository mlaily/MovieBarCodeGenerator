https://web.archive.org/web/20190722004804/https://stevens.li/guides/video/converting-hdr-to-sdr-with-ffmpeg/

zscale=transfer=linear:npl=100,format=gbrpf32le,zscale=primaries=bt709,tonemap=tonemap=hable,zscale=transfer=bt709:matrix=bt709:range=tv,format=yuv420p

To understand what the above command does, think of ffmpeg and the zscale plugin as a command chain (the output of one command is applied to the next comma-separated command) and finally the output format.
The first step converts the YUV source to 32-bit floating point RGB values, however the colour primaries are still in BT.2020. I also set the peak luminance to 100 nits, as all SDR-TVs would normally be in the range of 100-200 nits. The next zscale-command converts the primaries to BT.709. This will cause clipping, that is why it is important to work in 32-bit floating point, so the colour information isn’t lost, but just out-of-gamut. At this point I apply the hable tone-mapping filter.
The final zscale applies a BT.709 transfer matrix and also converts the format back to YUV 4:2:0 8-bit. Check below to see the difference.


The only problem here is that clipped colours will be shifted into white. You will not notice this effect in the original. That is why you should apply a desaturation filter which will move the clipped colours back into gamut. Look at the red and orange lights in the comparison.

example (default desat is 2 — 0 disables this option):
ffmpeg.exe -i input.mkv -vf select=gte(n\,360),zscale=t=linear:npl=100,
format=gbrpf32le,zscale=p=bt709,tonemap=tonemap=hable:desat=0,zscale=t=bt709:
m=bt709:r=tv,format=yuv420p -vframes 1 E:\output.png.

desat doc in ffmpeg tonemap filter:
    Apply desaturation for highlights that exceed this level of brightness. The higher the parameter, the more color information will be preserved. This setting helps prevent unnaturally blown-out colors for super-highlights, by (smoothly) turning into white instead. This makes images feel more natural, at the cost of reducing information about out-of-range colors.

    The default of 2.0 is somewhat conservative and will mostly just apply to skies or directly sunlit surfaces. A setting of 0.0 disables this option.

    This option works only if the input frame has a supported color tag.


---

zscale=transfer=linear:npl=100,format=gbrpf32le,zscale=primaries=bt709,tonemap=tonemap=hable,zscale=transfer=bt709:matrix=bt709:range=tv,format=yuv420p

zscale=transfer=linear:npl=100,
format=gbrpf32le,
zscale=primaries=bt709,
tonemap=tonemap=hable,
zscale=transfer=bt709:matrix=bt709:range=tv,
format=yuv420p

https://web.archive.org/web/20190722004804/https://stevens.li/guides/video/converting-hdr-to-sdr-with-ffmpeg/
zscale=t=linear:npl=100,
format=gbrpf32le,
zscale=p=bt709,
tonemap=tonemap=hable,
zscale=t=bt709:m=bt709:r=tv,
format=yuv420p

The tonemapping algorithms implemented only work on linear light, so input data should be linearized beforehand (and possibly correctly tagged).

ffmpeg -i INPUT -vf zscale=transfer=linear,tonemap=clip,zscale=transfer=bt709,format=yuv420p OUTPUT


zscale options:
https://github.com/FFmpeg/FFmpeg/blob/master/libavfilter/vf_zscale.c#L791

http://forum.doom9.org/showthread.php?t=175125
zscale=tin=smpte2084:min=bt2020nc:pin=bt2020:rin=tv:t=smpte2084:m=bt2020nc:p=bt2020:r=tv,zscale=t=linear:npl=100,format=gbrpf32le,zscale=p=bt709,tonemap=tonemap=hable:desat=0,zscale=t=bt709:m=bt709:r=tv,format=yuv420p

zscale=tin=smpte2084:min=bt2020nc:pin=bt2020:rin=tv,
zscale=t=linear:npl=100,
format=gbrpf32le,
zscale=p=bt709,
tonemap=tonemap=hable:desat=0,
zscale=t=bt709:m=bt709:r=tv,
format=yuv420p



zscale=tin=smpte2084:min=bt2020nc:pin=bt2020:rin=tv:t=smpte2084:m=bt2020nc:p=bt2020:r=tv,zscale=t=linear:npl=100,format=gbrpf32le,zscale=p=bt709,tonemap=tonemap=hable,zscale=t=bt709:m=bt709:r=tv,format=yuv420p



format=gbrpf32le,zscale=transfer=linear:npl=100:primaries=bt709,tonemap=tonemap=hable,zscale=transfer=bt709:matrix=bt709:range=tv,format=yuv420p